{"version":3,"sources":["utils/get.js","game.jsx","App.js","reportWebVitals.js","index.js"],"names":["get","obj","path","defaultValue","undefined","split","reduce","o","key","e","socket","io","connect","SetupForm","action","onChange","submit","className","playerName","onClick","name","rel","type","placeholder","evt","target","value","gameRoomId","Game","defaultPlayers","player1","score","player2","useState","setAction","message","setMessage","roomId","setRoomId","players","setPlayers","isStarter","setIsStarter","canPlay","setCanPlay","useEffect","on","console","log","id","data","initializeGame","disconnect","isWin","updateScores","winner","prevPlayers","currentPlayer","opponent","handleSelection","emit","ready","width","height","src","alt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAAe,SAASA,EAAIC,EAAKC,GAAiC,IAA3BC,EAA0B,4DAAXC,EAClD,IACE,OAAOF,EAAKG,MAAM,KAAKC,QAAO,SAACC,EAAGC,GAAJ,OAAYD,EAAEC,KAAMP,GAAO,KAAOE,EAChE,MAAOM,GACP,OAAON,G,iBCCPO,EAASC,KAAGC,QAAQ,yBAoJ1B,IAAMC,EAAY,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OACrC,OACE,sBAAKC,UAAU,QAAf,WACIH,EAAOI,YAAc,sBAAKD,UAAU,iBAAf,UACrB,wBACEA,UAAU,UACVE,QAAS,kBAAMJ,EAAS,CAAEK,KAAM,YAFlC,yBAMA,wBACEH,UAAU,WACVI,IAAI,sBACJF,QAAS,kBAAMJ,EAAS,CAAEK,KAAM,UAHlC,0BAQiB,WAAhBN,EAAOM,MAAqB,uBAAOE,KAAK,OAAOC,YAAY,kBAAkBR,SAAU,SAACS,GAAD,OAAST,EAAS,2BAAKD,GAAN,IAAcI,WAAYM,EAAIC,OAAOC,YAC7H,SAAhBZ,EAAOM,MACJ,gCACI,uBAAOE,KAAK,OAAOC,YAAY,gBAAgBR,SAAU,SAACS,GAAD,OAAST,EAAS,2BAAKD,GAAN,IAAca,WAAYH,EAAIC,OAAOC,YAC/G,uBAAOJ,KAAK,OAAOC,YAAY,kBAAkBR,SAAU,SAACS,GAAD,OAAST,EAAS,2BAAKD,GAAN,IAAcI,WAAYM,EAAIC,OAAOC,eAGxHZ,EAAOI,aAAeJ,EAAOa,YAA8B,WAAhBb,EAAOM,OAAsB,wBACvEH,UAAU,WACVE,QAASH,EAF8D,uBAUlEY,EArLf,WACE,IAAMC,EAAiB,CACrBC,QAAS,CACPV,KAAM,GACNW,MAAO,GAETC,QAAS,CACPZ,KAAM,GACNW,MAAO,IAIX,EAA4BE,mBAAS,IAArC,mBAAOnB,EAAP,KAAeoB,EAAf,KACA,EAA8BD,mBAAS,IAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA4BH,qBAA5B,mBAAOI,EAAP,KAAeC,EAAf,KACA,EAA8BL,mBAASJ,GAAvC,mBAAOU,EAAP,KAAgBC,EAAhB,KACA,EAAkCP,oBAAS,GAA3C,mBAAOQ,EAAP,KAAkBC,EAAlB,KACA,EAA8BT,oBAAS,GAAvC,mBAAOU,EAAP,KAAgBC,EAAhB,KAGAC,qBAAU,WAeR,OAdAnC,EAAOoC,GAAG,WAAW,WACnBC,QAAQC,IAAItC,EAAOuC,OAGrBvC,EAAOoC,GAAG,eAAc,SAACI,GACvBH,QAAQC,IAAIE,GACZZ,EAAUY,EAAKb,QACfD,EAAW,sCAAD,OAAuCc,EAAKb,OAA5C,WAGZ3B,EAAOoC,GAAG,sBAAqB,SAACI,GAC9BC,EAAeD,MAGV,WACLxC,EAAO0C,gBAER,IAEHP,qBAAU,WACRnC,EAAOoC,GAAG,kBAAiB,SAACI,GAC1BN,GAAW,GACO,SAAfM,EAAKG,MACJjB,EAAW,gBAEXkB,EAAaJ,QAGlB,IAEH,IAAMI,EAAe,SAACJ,GACpB,IAAMK,EAASd,IAAcS,EAAKG,MAAQ,UAAY,UACtDb,GAAW,SAAAgB,GAGT,OAFApB,EAAW,GAAD,OAAIpC,EAAIwD,EAAYD,GAAS,QAA7B,cACVC,EAAYD,GAAQxB,QACbyB,MAILL,EAAe,SAACD,GACpBV,EAAW,CACTV,QAAS,CACPV,KAAM8B,EAAKO,cACX1B,MAAO,GAETC,QAAS,CACPZ,KAAM8B,EAAKQ,SACX3B,MAAO,KAGXgB,QAAQC,IAAI,qBAAsBE,GAClCd,EAAW,GAAD,OAAIc,EAAKQ,SAAT,sBA4BNC,EAAkB,SAACjC,GACvBkB,GAAW,GACXR,EAAW,2BACX1B,EAAOkD,KAAK,aAAZ,aACIvB,OAASA,GACRI,EAAY,gBAAkB,WAAcf,KAI7CmC,EAAQlB,GAAWN,GAAUrC,EAAIuC,EAAS,iBAAmBvC,EAAIuC,EAAS,gBAEhF,OACE,qBAAKtB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,oDAGA,mBAAGA,UAAU,UAAb,SAAwBkB,IACvB0B,EAAQ,sBAAK5C,UAAU,OAAf,UACP,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,SAAf,SAAyBjB,EAAIuC,EAAS,kBACtC,qBAAKtB,UAAU,SAAf,SAAyBjB,EAAIuC,EAAS,kBACtC,sBAAMtB,UAAU,QAAhB,SAAyBjB,EAAIuC,EAAS,gBAAiB,KAHzD,MAGsE,sBAAMtB,UAAU,QAAhB,SAAyBjB,EAAIuC,EAAS,gBAAiB,QAE7H,sCACA,sBAAKtB,UAAU,UAAf,UACE,qBAAKA,UAAU,SAASE,QAAS,kBAAMwC,EAAgB,SAASG,MAAO,IAAKC,OAAQ,IAAKC,IAAI,YAAYC,IAAI,SAC7G,qBAAKhD,UAAU,SAASE,QAAS,kBAAMwC,EAAgB,UAAUG,MAAO,IAAKC,OAAQ,IAAKC,IAAI,aAAaC,IAAI,UAC/G,qBAAKhD,UAAU,SAASE,QAAS,kBAAMwC,EAAgB,YAAYG,MAAO,IAAKC,OAAQ,IAAKC,IAAI,eAAeC,IAAI,gBAErH,wBACEhD,UAAU,WACVI,IAAI,sBACJF,QAAS,kBA9CjByB,GAAW,GACXR,EAAW,oBACX1B,EAAOkD,KAAK,WAAZ,aACIvB,OAASA,GACRI,EAAY,gBAAkB,WAAcf,IAEjDY,EAAU,MACVJ,EAAU,IACVM,EAAWX,GACXnB,EAAO0C,kBACPhB,EAAW,IAXM,IAACV,GA4CZ,sBAQDW,GAAU,cAAC,EAAD,CAAWvB,OAAQA,EAAQC,SAAUmB,EAAWlB,OA/D7C,WACI,WAAhBF,EAAOM,OACTsB,GAAa,GACbhC,EAAOkD,KAAK,aAAc,CAAExC,KAAMN,EAAOI,cAEvB,SAAhBJ,EAAOM,OACTV,EAAOkD,KAAK,gBAAiB,CAAEvB,OAAQvB,EAAOa,WAAYP,KAAMN,EAAOI,aACvEoB,EAAUxB,EAAOa,sBC7EVuC,MATf,WAEE,OACE,qBAAKjD,UAAU,MAAf,SACE,cAAC,EAAD,OCKSkD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.111ca921.chunk.js","sourcesContent":["export default function get(obj, path, defaultValue = undefined) {\n    try {\n      return path.split('.').reduce((o, key) => o[key], obj || {}) || defaultValue;\n    } catch (e) {\n      return defaultValue;\n    }\n  }\n  ","import React, { useState, useEffect } from 'react';\nimport { io } from \"socket.io-client\";\nimport get from './utils/get'\nimport './styles.css';\n\nconst socket = io.connect(\"http://localhost:3000\");\n\nfunction Game() {\n  const defaultPlayers = {\n    player1: {\n      name: '',\n      score: 0\n    },\n    player2: {\n      name: '',\n      score: 0\n    }\n  };\n\n  const [action, setAction] = useState({})\n  const [message, setMessage] = useState('')\n  const [roomId, setRoomId] = useState()\n  const [players, setPlayers] = useState(defaultPlayers)\n  const [isStarter, setIsStarter] = useState(false)\n  const [canPlay, setCanPlay] = useState(true)\n\n\n  useEffect(() => {\n    socket.on(\"connect\", () => {\n      console.log(socket.id);\n    });\n\n    socket.on(\"gameCreated\",(data) => {\n      console.log(data)\n      setRoomId(data.roomId)\n      setMessage(`Waiting for player to join at room ${data.roomId}...`)\n    })\n  \n    socket.on(\"newPlayerJoinEvent\",(data) => {\n      initializeGame(data);\n    })\n\n    return function() {\n      socket.disconnect()\n    }\n  }, [])\n\n  useEffect(() => {\n    socket.on(\"scoreProcessed\",(data) => {\n      setCanPlay(true)\n      if(data.isWin === 'draw'){\n          setMessage('Its a drawn!')\n      } else {\n          updateScores(data)\n      }\n    })\n  }, [])\n\n  const updateScores = (data) => {\n    const winner = isStarter === data.isWin ? 'player1' : 'player2'\n    setPlayers(prevPlayers => {\n      setMessage(`${get(prevPlayers[winner], 'name')} has won!`)\n      prevPlayers[winner].score++\n      return prevPlayers\n    })\n  }\n\n  const initializeGame=(data) => {\n    setPlayers({\n      player1: {\n        name: data.currentPlayer,\n        score: 0\n      },\n      player2: {\n        name: data.opponent,\n        score: 0\n      }\n    })\n    console.log('innitializing game', data)\n    setMessage(`${data.opponent} has joined game`)\n  }\n\n  const handleStart = () => {\n      if (action.name === 'create') {\n        setIsStarter(true)\n        socket.emit('createGame', { name: action.playerName });\n      }\n      if (action.name === 'join') {\n        socket.emit('joinGameEvent', { roomId: action.gameRoomId, name: action.playerName });\n        setRoomId(action.gameRoomId)\n      }\n  }\n\n  const handleExit = (value) => {\n    setCanPlay(false)\n    setMessage('Exitting game...')\n    socket.emit('userLeft', {\n        roomId : roomId,\n        [isStarter ? 'currentPlayer' : 'opponent'] : value\n    });\n    setRoomId(null)\n    setAction({})\n    setPlayers(defaultPlayers)\n    socket.disconnect()\n    setMessage('')\n  }\n\n  const handleSelection = (value) => {\n    setCanPlay(false)\n    setMessage(`Waiting for opponent...`)\n    socket.emit('userPlayed', {\n        roomId : roomId,\n        [isStarter ? 'currentPlayer' : 'opponent'] : value\n    });\n  }\n\n  const ready = canPlay && roomId && get(players, 'player1.name') && get(players, 'player2.name')\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Rock Paper Scissors\n        </p>\n        <p className='message'>{message}</p>\n        {ready ? <div className='game'>\n          <div className='players'>\n            <div className='player'>{get(players, 'player1.name')}</div>\n            <div className='player'>{get(players, 'player2.name')}</div>\n            <span className='score'>{get(players, 'player1.score', 0)}</span> : <span className='score'>{get(players, 'player2.score', 0)}</span>\n          </div>\n          <h5>Play</h5>\n          <div className='choices'>\n            <img className='choice' onClick={() => handleSelection('Rock')} width={100} height={100} src='/rock.png' alt='Rock' />\n            <img className='choice' onClick={() => handleSelection('Paper')} width={100} height={100} src='/paper.png' alt='Paper' />\n            <img className='choice' onClick={() => handleSelection('Scissor')} width={100} height={100} src='/scissor.png' alt='Scissors' />\n          </div>\n          <button\n            className=\"exit-btn\"\n            rel=\"noopener noreferrer\"\n            onClick={() => handleExit()}\n          >\n            Exit\n        </button>\n        </div> :\n        !roomId && <SetupForm action={action} onChange={setAction} submit={handleStart} />\n        }\n        \n      </header>\n    </div>\n  );\n}\n\nconst SetupForm = ({ action, onChange, submit }) => {\n  return (\n    <div className='setup'>\n      {!action.playerName && <div className='action-buttons'>\n        <button\n          className=\"new-btn\"\n          onClick={() => onChange({ name: 'create' })}\n        >\n          Create Game\n        </button>\n        <button\n          className=\"join-btn\"\n          rel=\"noopener noreferrer\"\n          onClick={() => onChange({ name: 'join' })}\n        >\n          Join Game\n        </button>\n      </div>}\n        {action.name === 'create' && <input type=\"text\" placeholder=\"Enter Your Name\" onChange={(evt) => onChange({ ...action, playerName: evt.target.value })} />}\n        {action.name === 'join' && (\n            <div>\n                <input type=\"text\" placeholder=\"Enter Game Id\" onChange={(evt) => onChange({ ...action, gameRoomId: evt.target.value })} />\n                <input type=\"text\" placeholder=\"Enter Your Name\" onChange={(evt) => onChange({ ...action, playerName: evt.target.value })} />\n            </div>\n        )}\n        {action.playerName && (action.gameRoomId || action.name === 'create') && <button\n          className=\"join-btn\"\n          onClick={submit}\n        >\n          Start\n        </button>}\n    </div>\n  )\n}\n\nexport default Game;","import './App.css';\nimport Game from './game'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}